#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Define a struct to store the details of each round
struct Round {
    char userChoice;
    char computerChoice;
    int result;  // 1 for user win, -1 for computer win, 0 for tie
};

// Function to get the computer's choice
char getComputerChoice() {
    int randomNumber = rand() % 3; // Generates 0, 1, or 2
    if (randomNumber == 0) return 'R'; // Rock
    else if (randomNumber == 1) return 'P'; // Paper
    else return 'S'; // Scissors
}

// Function to get the user's choice, with input validation
char getUserChoice() {
    char choice;
    while (1) {
        printf("\nEnter your choice (R for Rock, P for Paper, S for Scissors): ");
        scanf(" %c", &choice);

        // Convert to uppercase for consistency
        if (choice == 'r' || choice == 'R') return 'R';
        else if (choice == 'p' || choice == 'P') return 'P';
        else if (choice == 's' || choice == 'S') return 'S';
        else printf("Invalid input! Please enter R, P, or S.\n");
    }
}

// Function to determine the winner of a single round
int determineWinner(char userChoice, char computerChoice) {
    if (userChoice == computerChoice) {
        return 0;  // 0 for a tie
    }
    else if ((userChoice == 'R' && computerChoice == 'S') ||
             (userChoice == 'P' && computerChoice == 'R') ||
             (userChoice == 'S' && computerChoice == 'P')) {
        return 1;  // 1 for user win
    }
    else {
        return -1; // -1 for computer win
    }
}

// Function to display the result of each round
void displayRoundResult(struct Round round, int roundNum) {
    printf("\n--- Round %d ---\n", roundNum);
    printf("You chose: %c\n", round.userChoice);
    printf("Computer chose: %c\n", round.computerChoice);
    if (round.result == 1) {
        printf("You won this round!\n");
    } else if (round.result == -1) {
        printf("Computer won this round!\n");
    } else {
        printf("It's a tie!\n");
    }
}

int main() {
    int rounds, userScore = 0, computerScore = 0;
    
    // Array to store the results of all rounds
    struct Round history[100];  // Assuming a maximum of 100 rounds

    srand(time(0)); // Seed the random number generator

    printf("Welcome to Rock, Paper, Scissors!\n");

    // Ask the user how many rounds to play
    printf("How many rounds would you like to play? ");
    scanf("%d", &rounds);

    // Ensure the number of rounds doesn't exceed the history array size
    if (rounds > 100) {
        printf("Too many rounds. The maximum is 100.\n");
        return 1;
    }

    // Game loop for the number of rounds
    for (int i = 0; i < rounds; i++) {
        struct Round currentRound;  // Struct to hold the current round's data
        
        // Get the user and computer choices
        currentRound.userChoice = getUserChoice();
        currentRound.computerChoice = getComputerChoice();

        // Determine the result of the round and store it in the struct
        currentRound.result = determineWinner(currentRound.userChoice, currentRound.computerChoice);

        // Store the round in the history array
        history[i] = currentRound;

        // Update scores based on the result
        if (currentRound.result == 1) {
            userScore++;
        } else if (currentRound.result == -1) {
            computerScore++;
        }

        // Display the result of the current round
        displayRoundResult(currentRound, i + 1);
        
        // Display current score
        printf("Current Score -> You: %d | Computer: %d\n", userScore, computerScore);
    }

    // Display the final score and history of all rounds
    printf("\n--- Final Score ---\nYou: %d | Computer: %d\n", userScore, computerScore);

    if (userScore > computerScore) {
        printf("Congratulations! You won the game!\n");
    } else if (userScore < computerScore) {
        printf("Computer wins the game. Better luck next time!\n");
    } else {
        printf("The game is a tie!\n");
    }

    // Display history of all rounds
    printf("\n--- Game History ---\n");
    for (int i = 0; i < rounds; i++) {
        printf("Round %d -> You: %c, Computer: %c, ", i + 1, history[i].userChoice, history[i].computerChoice);
        if (history[i].result == 1) {
            printf("Result: You Won\n");
        } else if (history[i].result == -1) {
            printf("Result: Computer Won\n");
        } else {
            printf("Result: Tie\n");
        }
    }

    return 0;
}
